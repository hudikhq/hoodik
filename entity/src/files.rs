//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use chrono::NaiveDateTime;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "files")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: Uuid,
    pub name_hash: String,
    pub encrypted_name: String,
    pub encrypted_thumbnail: Option<String>,
    pub mime: String,
    pub size: Option<i64>,
    pub chunks: Option<i32>,
    pub chunks_stored: Option<i32>,
    pub file_id: Option<Uuid>,
    pub file_created_at: NaiveDateTime,
    pub created_at: NaiveDateTime,
    pub finished_upload_at: Option<NaiveDateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::FileId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Files,
    #[sea_orm(has_many = "super::user_files::Entity")]
    UserFiles,
    #[sea_orm(has_many = "super::file_tokens::Entity")]
    FileTokens,
    #[sea_orm(has_many = "super::links::Entity")]
    Links,
}

pub struct ChildFilesLink;

impl Linked for ChildFilesLink {
    type FromEntity = Entity;

    type ToEntity = Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![Relation::Files.def()]
    }
}

impl Related<Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Files.def()
    }
}

impl Related<super::user_files::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserFiles.def()
    }
}

impl Related<super::file_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FileTokens.def()
    }
}

impl Related<super::tokens::Entity> for Entity {
    fn to() -> RelationDef {
        super::file_tokens::Relation::Tokens.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::file_tokens::Relation::Files.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
